[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "migrations",
]

# Same as Black.
line-length = 119
indent-width = 4

# Assume Python 3.9+.
target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # Django
    "DJ",
    # flake8-pie
    "PIE",
    # flake8-comprehensions
    "C4",
    # flake8-unused-arguments
    "ARG",
    # flake8-use-pathlib
    "PTH",
    # Ruff-specific rules
    "RUF",
]

ignore = [
    # Django model's __str__ method
    "DJ008",
    # Allow non-abstract empty models
    "DJ006",
    # Allow nullable CharField
    "DJ001",
    # Ignore complexity
    "C901",
    # Allow assert in tests
    "B011",
    # Allow print statements (can be useful for debugging)
    "T201",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and fixtures
"tests/*" = ["PLR2004", "S101", "ARG", "FBT"]
# Settings files can have unused imports
"*/settings.py" = ["F401"]
# __init__.py files can have unused imports
"__init__.py" = ["F401"]
# Example files can be more relaxed
"example/*" = ["DJ", "ARG"]

[tool.ruff.lint.isort]
known-first-party = ["django_json_widget"]
known-third-party = ["django"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
docstring-code-line-length = "dynamic" 